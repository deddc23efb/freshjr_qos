#!/bin/sh
##FreshJR_QOS v1.92_382 work in progress
# DEDD: questions or comments for future work are marked with DEDD
# DEDD: formatting, embedded tabs and long lines are out of control in the 
#       file. once we settle on a baseline, it should be cleaned up
# DEDD: I moved all Custom and Others filters to priority 2 so
#       that it doesn't interfere with whats happening at prio 1.
# DEDD: I reordered the custom filters to go BEFORE the new Others 
#       Filter so that the Others doesn't steal from the Custom Rules.
# DEDD: I disabled the hard coded custom filters from FreshJR.
#       I added in two new IP address based examples (used by me).
# DEDD: There is an existing HTTPS filter that I think is no longer
#       required in v382 - I think ASUS has added - should double check
# DEDD: My RT-AC3100 is taking more than 30s at startup to complte. I've extended
#       the sleep wait for the script to 60s.  Will require monitoring.
# DEDD: running this on my system it seems possible to get a couple of 
#       the script going in parallel.  
#       FreshJRs install instructions firewall-start sh uld be changed to:
#       ps w | grep -v grep | grep /jffs/scripts/FreshJR_QOS || sh /jffs/scripts/FreshJR_QOS
#
# DEDD: firewall-start is called when QOS is disabled. I'll bet funny things
#       are happening as a result.  It looks like the br0 filters are still
#       in place, but the eth0 filters are deleted.  Not sure what that
#       means for traffic performance. I think ASUS has a bug here. Toggling QOS 
#       on and off over and over keeps adding redundant filters to br0.
# DEDD: are we counting on eth0 too much as the private side interface?  
#       how would this extend to VPN services and so on. Something for the 
#       future?
# DEDD: No attempt at dynamically figuring out if this script is running
#       on a 380 vs 382 release
#
##################################
# DEDD:
# SET DEBUG to 0 for normal operation, setting it to 1 will enable 
# verbose debug messages when running from the shell and skip annoying
# things like updating the crontab and sleeping.
DEBUG=0
##FreshJR_QOS v1.92 released 09/07/2017
##Script Tested on ASUS AC-68U, FW380.67, using Adaptive QOS with Manual Bandwidth Settings
##Script Changes Unidentified Packet QOS destination from Default Traffic Container (Category7) into user definable (in WebUI) Other Traffic Container
##Script Changes Minimum Guarenteed Bandwidth per QOS category from 128Kbit into user defined percentages upload and download.
##Script supports custom QOS rules, to create rules copy applicable rule templates below, change filter parameters as desried, and then paste into custom rule start area. 
##	Included custom rule moves any TCP/UDP traffic on ports 500 & 4500 into VOIP traffic Container.			(Wifi Calling)					
##	Included custom rule moves any TCP/UDP traffic on ports 16384 - 16415 into VOIP traffic Container.		(Facetime)					

#---------------------------------------------------------------------------------------------------------------
#	VALID FLOW ID'S FOR CUSTOM RULES
#	 ${VOIP}, ${Gaming}, ${Others}, ${Web}, ${Streaming}, ${Downloads}, ${Default}
#
#	VALID MARKS FOR IPTABLES
#	 ${VOIP_mark}, ${Gaming_mark}, ${Others_mark}, ${Web_mark}, ${Streaming_mark}, ${Downloads_mark}, ${Default_mark}
#
#   DOWNLOAD/INCOMMING TRAFFIC rule templates.	See comments next to rule for details
#	 ${tc} filter add dev br0 protocol all prio 1 u32 match ip dport 1234 0xffff flowid ${Downloads}			#Template Rule 1 (All incomming traffic w/ LAN destination port 1234						goes to "Downloads" Traffic Container)										(0xFFFF port mask defines only one port, if port range is desired see SNB forum post for guide)
#	 ${tc} filter add dev br0 protocol all prio 1 u32 match ip dst 192.168.1.100/32 flowid ${VOIP}				#Template Rule 2 (All incomming traffic w/ LAN destination ip 192.168.1.100  				goes to "VOIP" Traffic Container) 											
#	 ${tc} filter add dev br0 protocol all prio 1 u32 match u32 0xCCDDEEFF 0xffffffff at -16 flowid {VOIP}		#Template Rule 3 (All incomming traffic w/ LAN destination MAC Address AA:BB:CC:DD:EE:FF 	goes to "VOIP" Traffic Container)											**RULE USES LAST 8 MAC DIGITS
#	 ${tc} filter add dev br0 protocol all prio 1 u32 match ip src 75.75.75.75/32 flowid ${Streaming}			#Template Rule 4 (All incomming traffic w/ WAN server source ip 75.75.75.75 				goes to "Streaming" Traffic Container)										(/32 CIDR mask defines only one ip, if IP range is desired see SNB forum post for guide)																				
#
#   UPLOAD/OUTOING TRAFFIC rule templates.		See comments next to rule for details
#	 ${tc} filter add dev eth0 protocol all prio 1 u32 match ip sport 1234 0xffff flowid ${Downloads}			#Template Rule 1											  (All outgoing traffic w/ LAN source port 1234 					goes to "Downloads" Traffic Container) 		(0xFFFF port mask defines only one port, if port range is desired see SNB forum post for guide)
#	 ${tc} filter add dev eth0 protocol all prio 1 u32 match ip src 192.168.1.100/32 flowid ${VOIP}				#Template Rule 2 -->NOT WORKING/USE IPTABLES ALTERNATIVE<--	  (All outgoing traffic w/ LAN source ip 192.168.1.123 				goes to "VOIP" Traffic Container) 			**Reason this does not work is because you can only apply filters to egress traffic.  The egress source IP of outgoing traffic is your Public WAN IP, not your Local LAN IP.  So filter will not match on local IP.									
#	 ${tc} filter add dev eth0 protocol all prio 1 u32 match u16 0xEEFF 0xffff  at -8 flowid {VOIP}				#Template Rule 3 -->NOT WORKING/USE IPTABLES ALTERNATIVE<--	  (All outgoing traffic w/ LAN source MAC Address AA:BB:CC:DD:EE:FF goes to "VOIP" Traffic Container) 			**RULE USES LAST 4 MAC DIGITS 			**Reason this does not work is because you can only apply filters to egress traffic.  The egress source MAC ADDRESS of outgoing traffic is your Router MAC ADDRESS, not your client MAC ADDRESS.  So filter will not match on local MAC ADDRESS.	
#	 ${tc} filter add dev eth0 protocol all prio 1 u32 match ip dst 75.75.75.75/32 flowid ${Streaming}			#Template Rule 4 											  (All outgoing traffic w/ WAN server destination ip 75.75.75.75 	goes to "Streaming" Traffic Container) 									(/32 CIDR mask defines only one ip, if IP range is desired see SNB forum post for guide)																										
#	
#	 iptables -D POSTROUTING -t mangle -o eth0 -s 192.168.1.100/32 -j MARK --set-mark ${VOIP_mark}						#Template Rule 2 WORKING ALTERNATIVE (Line1/2)
#	 iptables -A POSTROUTING -t mangle -o eth0 -s 192.168.1.100/32 -j MARK --set-mark ${VOIP_mark}						#Template Rule 2 WORKING ALTERNATIVE (Line1/2)
#	 iptables -D POSTROUTING -t mangle -o eth0 -m mac --mac-source AA:BB:CC:DD:EE:FF -j MARK --set-mark ${VOIP_mark}	#Template Rule 3 WORKING ALTERNATIVE (Line1/2)
#	 iptables -A POSTROUTING -t mangle -o eth0 -m mac --mac-source AA:BB:CC:DD:EE:FF -j MARK --set-mark ${VOIP_mark}	#Template Rule 3 WORKING ALTERNATIVE (Line1/2)
#---------------------------------------------------------------------------------------------------------------		

if [ "${DEBUG}" = "0" ] ; then
    cru a FreshJR_QOS "0 0 * * * /jffs/scripts/FreshJR_QOS"		## schedules a daily check to see if modifcation is still persistant
fi

if [ "$(nvram get qos_enable)" = "1" ] && [ "$(nvram get qos_type)" = "1" ] ; then
	logger -t FreshJR_QOS "Adaptive QOS: Modification Script Started"

    if [ "${DEBUG}" = "0" ] ; then
    	sleep 60	 
    else
        echo "skipping sleep wait."
    fi

	if [ -e "/usr/sbin/realtc" ] ; then	
		tc="realtc"
	else
		tc="tc"
	fi
	
	####################  Variables Setup #####################

	#Percent of download speed guaranteed per QOS catagory, change below as desired (sum should equal 100)
		NetControl_DownBandPercent=5					#This value can be adjust as desired
		VoIP_DownBandPercent=20							#This value can be adjust as desired
		Gaming_DownBandPercent=15						#This value can be adjust as desired
		Others_DownBandPercent=10						#This value can be adjust as desired		#Note: New destination for all unidentified traffic per script default
		WebSurfing_DownBandPercent=10					#This value can be adjust as desired
		Video_DownBandPercent=30						#This value can be adjust as desired
		FileTransfer_DownBandPercent=5					#This value can be adjust as desired
		Default_DownBandPercent=5						#This value can be adjust as desired		#Note: Original destination all for unidentified traffic, no traffic should flow here
	
	#Percent of upload speed guaranteed per QOS catagory, change below as desired (sum should equal 100)
		NetControl_UpBandPercent=5						#This value can be adjust as desired
		VoIP_UpBandPercent=20							#This value can be adjust as desired
		Gaming_UpBandPercent=15							#This value can be adjust as desired
		Others_UpBandPercent=30							#This value can be adjust as desired		#Note: New destination for all unidentified traffic per script default
		WebSurfing_UpBandPercent=10						#This value can be adjust as desired
		Video_UpBandPercent=10							#This value can be adjust as desired
		FileTransfer_UpBandPercent=5					#This value can be adjust as desired
		Default_UpBandPercent=5							#This value can be adjust as desired		#Note: Original destination all for unidentified traffic, no traffic should flow here
	
	
    if [ "${DEBUG}" != "0" ] ; then
        echo "Examing current container configuration..."
    fi

	while read -r line;																			#reads all QOS rules, used to read user order of VOIP contianers
	do

        if [ "${DEBUG}" != "0" ] ; then
            # print dots as we process stuff so it doesnt look dead
            printf "."
        fi

		flowid="$( echo -n ${line} | sed -n -e 's/.*flowid //p' | tail -c 1)"				#check if individual rule line output has valid flowID which would then correspond to an individual rules Traffic Container / Catagory / Flowid. 
		if [ "${flowid}" != "" ] ; then														#if valid flowID is found, read next line.  
			read line																	
			mark="$(echo ${line} | sed -n -e 's/.*mark \([a-zA-z0-9]* [a-zA-z0-9]*\).*/\1/p')"		#This line reads which individual QOS traffic rule / mark corresponds to the Traffic Container / Catagory / Flowid read in the previous line

			if [ "${mark}" = "0x80060000 0xc03f0000" ] ; then 						#VOIP
				eval "Cat${flowid}DownBandPercent=${VoIP_DownBandPercent}"
				eval "Cat${flowid}UpBandPercent=${VoIP_UpBandPercent}"
				VOIP="1:1${flowid}"											#Use this variable for custom QOS rule flowID (case sensitive)
			fi
			
			if [ "${mark}" = "0x80080000 0xc03f0000" ] ; then 						#Gaming
				eval "Cat${flowid}DownBandPercent=${Gaming_DownBandPercent}"
				eval "Cat${flowid}UpBandPercent=${Gaming_UpBandPercent}"
				Gaming="1:1${flowid}"										#Use this variable for custom QOS rule flowID (case sensitive)
			fi
			
			if [ "${mark}" = "0x800a0000 0xc03f0000" ] ; then 						#Others
				eval "Cat${flowid}DownBandPercent=${Others_DownBandPercent}"
				eval "Cat${flowid}UpBandPercent=${Others_UpBandPercent}"
				Others="1:1${flowid}"										#Use this variable for custom QOS rule flowID (case sensitive)
			fi
			
			if [ "${mark}" = "0x800d0000 0xc03f0000" ] ; then 						#Web Surfing
				eval "Cat${flowid}DownBandPercent=${WebSurfing_DownBandPercent}"
				eval "Cat${flowid}UpBandPercent=${WebSurfing_UpBandPercent}"
				Web="1:1${flowid}"											#Use this variable for custom QOS rule flowID (case sensitive)
			fi
			
			if [ "${mark}" = "0x80040000 0xc03f0000" ] ; then 						#Streaming
				eval "Cat${flowid}DownBandPercent=${Video_DownBandPercent}"
				eval "Cat${flowid}UpBandPercent=${Video_UpBandPercent}"
				Streaming="1:1${flowid}"									#Use this variable for custom QOS rule flowID (case sensitive)
			fi
			
			if [ "${mark}" = "0x80030000 0xc03f0000" ] ; then 						#Downloads
				eval "Cat${flowid}DownBandPercent=${FileTransfer_DownBandPercent}"
				eval "Cat${flowid}UpBandPercent=${FileTransfer_UpBandPercent}"
				Downloads="1:1${flowid}"									#Use this variable for custom QOS rule flowID (case sensitive)
			fi
			
			if [ "${mark}" = "0x80000000 0xc000ffff" ] ; then 						#Default (Unidentified traffic)
				Default="1:1${flowid}"										#Use this variable for custom QOS rule flowID (case sensitive)
			fi
				
		fi
	done <<EOF
		$(${tc} filter show dev br0 | grep -o "flowid.*" -A1 | sed '/^--$/d')
EOF
	
    if [ "${DEBUG}" != "0" ] ; then
        echo 
        echo "Current filter targets"
        echo "  VOIP:      ${VOIP}"
        echo "  Gaming:    ${Gaming}"
        echo "  Others:    ${Others}"
        echo "  Web:       ${Web}"
        echo "  Streaming: ${Streaming}"
        echo "  Downloads: ${Downloads}"
        echo "  Default:   ${Default}"
    fi


	Cat0DownBandPercent=${NetControl_DownBandPercent}
	Cat0UpBandPercent=${NetControl_UpBandPercent}

	Cat7DownBandPercent=${Default_DownBandPercent}
	Cat7UpBandPercent=${Default_UpBandPercent}
	
	############################### Unidentified Traffic Priority & Custom Rules ##########################
	
	if [ "${Default}" = "1:17" ] ; then
		logger -t FreshJR_QOS "Adaptive QOS: Changing container for Unidentified Traffic & Applying Custom Rules"

		VOIP_mark="0x40060001"			#Note these marks are same as filter match/mask combo but have a 1 at the end.  That trailing one prevents the filters from being caught by unidentified mask
		Gaming_mark="0x40080001"
		Others_mark="0x400a0001"
		Web_mark="0x400d0001"
		Streaming_mark="0x40040001"
		Downloads_mark="0x40030001"
		Default_mark="0x40000001"

	   ####################  Custom Rules Setup #####################
	   # DOWNLOAD (INCOMING TRAFFIC) CUSTOM RULES START HERE
       # Assume ASUS places Catch-All at Prio 2. 
       # Clean up existing priority 2 block,
       # install custom rules and end with catch-all
	   ${tc} filter del dev br0 parent 1: prio 2																	#Deletes rule routing unidentified traffic into "Default" traffic container
       
       ########
       # CUSTOM RULES: 
       # DOWNLOAD (INCOMING TRAFFIC) CUSTOM RULES START HERE												
	   #       ${tc} filter add dev br0 protocol all prio 1 u32 match ip dport 500 0xffff flowid ${VOIP}				#Wifi Calling   (All incomming traffic w/ LAN destination port 500 				goes to "VOIP" Traffic Container) 								
	   #       ${tc} filter add dev br0 protocol all prio 1 u32 match ip dport 4500 0xffff flowid ${VOIP}				#Wifi Calling   (All incomming traffic w/ LAN destination port 4500 			goes to "VOIP" Traffic Container)
	   #       ${tc} filter add dev br0 protocol all prio 1 u32 match ip dport 16384 0xffe0 flowid ${VOIP}				#Facetime       (All incomming traffic w/ LAN destination ports 16384 - 16415 	goes to "VOIP" Traffic Container) 
       # DEDD: Not certain this filter is required.  I see this in my default config on reset.
	   #       ${tc} filter add dev br0 protocol all prio 15 u32 match mark 0x80130000 0xc03f0000 flowid ${Web}		#https traffic	(rule missing from ASUS default rule set)
       ## VOIP device downloads
       # ${tc} filter add dev br0 protocol all prio 2 u32 match ip dst 192.168.2.42/32 flowid ${VOIP} 
       ## Bittorrent VM downloads
       #${tc} filter add dev br0 protocol all prio 2 u32 match ip dst 192.168.2.35/32 flowid ${Downloads} 

       ########
       # THE CATCH ALL should go at the end of the PRIO 2 custom area		
       # so that Custom Rules for Unidentified Traffic are
       # are not stolen by the catch-all
       ${tc} filter add dev br0 protocol all prio 2 u32 match mark 0x80000000 0xc000ffff flowid ${Others}			#Creates rule routing unidentified traffic into "Others" traffic container which user adjustable in webUI, instead of default reouting pf traffoc into non adjustable "Default" traffic container		
       ########

		# UPLOAD (OUTGOING TRAFFIC) CUSTOM RULES START HERE												
        # Assume ASUS places Catch-All at Prio 2. 
        # Clean up existing priority 2 block,
        # install custom rules and end with catch-all
        ${tc} filter del dev eth0 parent 1: prio 2																	#Deletes rule routing unidentified traffic into "Default" traffic container
        # CUSTOM RULES: 
        #		${tc} filter add dev eth0 protocol all prio 2 u32 match ip sport 500 0xffff flowid ${VOIP}				#Wifi Calling	(All outgoing traffic w/ LAN source port 500 				goes to "VOIP" Traffic Container)  										
	   #		${tc} filter add dev eth0 protocol all prio 2 u32 match ip sport 4500 0xffff flowid ${VOIP}				#Wifi Calling	(All outgoing traffic w/ LAN source port 4500				goes to "VOIP" Traffic Container) 
	   #		${tc} filter add dev eth0 protocol all prio 2 u32 match ip sport 16384 0xffe0 flowid ${VOIP}			#Facetime		(All outgoing traffic w/ LAN source ports 16384 - 16415 	goes to "VOIP" Traffic Container) 
       # DEDD: Not certain this is required.  I see this in my default config on reset.
	   #		${tc} filter add dev eth0 protocol all prio 15 u32 match mark 0x40130000 0xc03f0000 flowid ${Web}		#https traffic	(rule missing from ASUS default rule set)
       # MORE SAMPLES:
       # Note iptables must be used with IP address based matching in the upstream direction
       ## VOIP device
	   #iptables -D POSTROUTING -t mangle -o eth0 -s 192.168.2.42/32 -j MARK --set-mark ${VOIP_mark}
	   #iptables -A POSTROUTING -t mangle -o eth0 -s 192.168.2.42/32 -j MARK --set-mark ${VOIP_mark}
       ## Bittorrent VM
	   #iptables -D POSTROUTING -t mangle -o eth0 -s 192.168.2.35/32 -j MARK --set-mark ${Downloads_mark}
	   #iptables -A POSTROUTING -t mangle -o eth0 -s 192.168.2.35/32 -j MARK --set-mark ${Downloads_mark}

       ########
       # THE CATCH ALL should go at the end of the PRIO 2 custom area		
       # so that Custom Rules for Unidentified Traffic are
       # are not stolen by the catch-all
       ${tc} filter add dev eth0 protocol all prio 2 u32 match mark 0x40000000 0xc000ffff flowid ${Others}			#Creates rule routing unidentified traffic into "Others" traffic container which user adjustable in webUI, instead of default reouting pf traffoc into non adjustable "Default" traffic container		
       ########

	else
		logger -t FreshJR_QOS "Adaptive QOS: No change required for Unidentified Traffic Container or Custom Rules"
        if [ "${DEBUG}" != "0" ] ; then
            echo "No changes for Adaptive QOS Container Priority required."
        fi
	fi
	 
	######################## Minimum Alotted Bandwidth Per QOS Catagory ##########################
	
	
	DownCeil="$(printf "%.0f" $(nvram get qos_ibw))"															#Maximum download rate defined in WebUI
	UpCeil="$(printf "%.0f" $(nvram get qos_obw))"
	
	DownRate0="$(expr ${DownCeil} \* ${Cat0DownBandPercent} / 100)"											#New rates that correspond to user defined percentages above
	DownRate1="$(expr ${DownCeil} \* ${Cat1DownBandPercent} / 100)"
	DownRate2="$(expr ${DownCeil} \* ${Cat2DownBandPercent} / 100)"
	DownRate3="$(expr ${DownCeil} \* ${Cat3DownBandPercent} / 100)"
	DownRate4="$(expr ${DownCeil} \* ${Cat4DownBandPercent} / 100)"
	DownRate5="$(expr ${DownCeil} \* ${Cat5DownBandPercent} / 100)"
	DownRate6="$(expr ${DownCeil} \* ${Cat6DownBandPercent} / 100)"
	DownRate7="$(expr ${DownCeil} \* ${Cat7DownBandPercent} / 100)"

	UpRate0="$(expr ${UpCeil} \* ${Cat0UpBandPercent} / 100)"
	UpRate1="$(expr ${UpCeil} \* ${Cat1UpBandPercent} / 100)"
	UpRate2="$(expr ${UpCeil} \* ${Cat2UpBandPercent} / 100)"
	UpRate3="$(expr ${UpCeil} \* ${Cat3UpBandPercent} / 100)"
	UpRate4="$(expr ${UpCeil} \* ${Cat4UpBandPercent} / 100)"
	UpRate5="$(expr ${UpCeil} \* ${Cat5UpBandPercent} / 100)"
	UpRate6="$(expr ${UpCeil} \* ${Cat6UpBandPercent} / 100)"
	UpRate7="$(expr ${UpCeil} \* ${Cat7UpBandPercent} / 100)"
	 
	 
	CurrentDownRate1="$(${tc} class show dev br0 | grep -w "1:11" | tr ' ' '\n' | grep "rate" -A1 | tail -n 1 | sed -n 's/\([0-9]\+\).*/\1/p')"
    # DEDD: Is this test sufficient?  It tests one class for change,
    # but not all. Seems weak to me. Something better needed?
	if [ "${CurrentDownRate1}" != "${DownRate1}" ] ; then
		logger -t FreshJR_QOS "Adaptive QOS: Changing minimum alloted bandwidth per QOS category to user defined percentages"

        if [ "${DEBUG}" != "0" ] ; then
            echo "Changes required for bw percentages: ${CurrentDownRate1} != ${DownRate1}"
        fi

        # DEDD: assuming that the trailing Kbit and b are ALWAYS that.  Does tc ever
        #       return Mbit or b on these show commands? We would need more smarts to 
        #       handle that to ensure that the match we do here and the number returned
        #       by tc are the same scale.
		DownBurst="$(tc class show dev br0 | grep -w "1:10" | tr ' ' '\n' | grep -w "burst" -A1 | tail -n1 | sed -n 's/\([0-9]\+\).*/\1/p')"
		DownCburst="$(tc class show dev br0 | grep -w "1:10" | tr ' ' '\n' | grep -w "cburst" -A1 | tail -n1 | sed -n 's/\([0-9]\+\).*/\1/p')"
		
		UpBurst="$(tc class show dev eth0 | grep -w "1:10" | tr ' ' '\n' | grep -w "burst" -A1 | tail -n1 | sed -n 's/\([0-9]\+\).*/\1/p')"
		UpCburst="$(tc class show dev eth0 | grep -w "1:10" | tr ' ' '\n' | grep -w "cburst" -A1 | tail -n1 | sed -n 's/\([0-9]\+\).*/\1/p')"
	
        if [ "${DEBUG}" != "0" ] ; then
            echo "Current Values:"
            echo "  CurrentDownRate1: ${CurrentDownRate1}"
            echo "  DownBurst       : ${DownBurst}"
            echo "  DownCburst      : ${DownCburst}"
            echo "  UpBurst         : ${UpBurst}"
            echo "  UpCburst        : ${UpCburst}"
            echo "Common:"
            echo "  DownCeil:   ${DownCeil}"
            echo "  DownBurst:  ${DownBurst}"
            echo "  DownCburst: ${DownCburst}"
            echo "  UpCeil:     ${UpCeil}"
            echo "  UpBurst:    ${UpBurst}"
            echo "  UpCburst:   ${UpCburst}"
            echo "DownRate0 : ${DownRate0}"
            echo "DownRate1 : ${DownRate1}"
            echo "DownRate2 : ${DownRate2}"
            echo "DownRate3 : ${DownRate3}"
            echo "DownRate4 : ${DownRate4}"
            echo "DownRate5 : ${DownRate5}"
            echo "DownRate6 : ${DownRate6}"
            echo "DownRate7 : ${DownRate7}"
            echo "UpRate0   : ${UpRate0}"
            echo "UpRate1   : ${UpRate1}"
            echo "UpRate2   : ${UpRate2}"
            echo "UpRate3   : ${UpRate3}"
            echo "UpRate4   : ${UpRate4}"
            echo "UpRate5   : ${UpRate5}"
            echo "UpRate6   : ${UpRate6}"
            echo "UpRate7   : ${UpRate7}"
            echo 
        fi

        #DEDD: the Burst and Cburst values should be looked at,
        #      they may not line up with the original ASUS config.
        #      It would be good to know why.
        tc class change dev br0 parent 1:1 classid 1:10 htb prio 0 rate ${DownRate0}Kbit ceil ${DownCeil}Kbit burst ${DownBurst} cburst ${DownCburst}
        tc class change dev br0 parent 1:1 classid 1:11 htb prio 1 rate ${DownRate1}Kbit ceil ${DownCeil}Kbit burst ${DownBurst} cburst ${DownCburst}
        tc class change dev br0 parent 1:1 classid 1:12 htb prio 2 rate ${DownRate2}Kbit ceil ${DownCeil}Kbit burst ${DownBurst} cburst ${DownCburst}
        tc class change dev br0 parent 1:1 classid 1:13 htb prio 3 rate ${DownRate3}Kbit ceil ${DownCeil}Kbit burst ${DownBurst} cburst ${DownCburst}
        tc class change dev br0 parent 1:1 classid 1:14 htb prio 4 rate ${DownRate4}Kbit ceil ${DownCeil}Kbit burst ${DownBurst} cburst ${DownCburst}
        tc class change dev br0 parent 1:1 classid 1:15 htb prio 5 rate ${DownRate5}Kbit ceil ${DownCeil}Kbit burst ${DownBurst} cburst ${DownCburst}
        tc class change dev br0 parent 1:1 classid 1:16 htb prio 6 rate ${DownRate6}Kbit ceil ${DownCeil}Kbit burst ${DownBurst} cburst ${DownCburst}
        tc class change dev br0 parent 1:1 classid 1:17 htb prio 7 rate ${DownRate7}Kbit ceil ${DownCeil}Kbit burst ${DownBurst} cburst ${DownCburst}

        tc class change dev eth0 parent 1:1 classid 1:10 htb prio 0 rate ${UpRate0}Kbit ceil ${UpCeil}Kbit burst ${UpBurst} cburst ${UpCburst}
        tc class change dev eth0 parent 1:1 classid 1:11 htb prio 1 rate ${UpRate1}Kbit ceil ${UpCeil}Kbit burst ${UpBurst} cburst ${UpCburst}
        tc class change dev eth0 parent 1:1 classid 1:12 htb prio 2 rate ${UpRate2}Kbit ceil ${UpCeil}Kbit burst ${UpBurst} cburst ${UpCburst}
        tc class change dev eth0 parent 1:1 classid 1:13 htb prio 3 rate ${UpRate3}Kbit ceil ${UpCeil}Kbit burst ${UpBurst} cburst ${UpCburst}
        tc class change dev eth0 parent 1:1 classid 1:14 htb prio 4 rate ${UpRate4}Kbit ceil ${UpCeil}Kbit burst ${UpBurst} cburst ${UpCburst}
        tc class change dev eth0 parent 1:1 classid 1:15 htb prio 5 rate ${UpRate5}Kbit ceil ${UpCeil}Kbit burst ${UpBurst} cburst ${UpCburst}
        tc class change dev eth0 parent 1:1 classid 1:16 htb prio 6 rate ${UpRate6}Kbit ceil ${UpCeil}Kbit burst ${UpBurst} cburst ${UpCburst}
        tc class change dev eth0 parent 1:1 classid 1:17 htb prio 7 rate ${UpRate7}Kbit ceil ${UpCeil}Kbit burst ${UpBurst} cburst ${UpCburst}
    else
        logger -t FreshJR_QOS "Adaptive QOS: No change required for QOS category bandwidth percentages"
        if [ "${DEBUG}" != "0" ] ; then
            echo "Skipping bw changes: No changes required for bw percentages: ${CurrentDownRate1} == ${DownRate1}"
        fi
    fi
fi
